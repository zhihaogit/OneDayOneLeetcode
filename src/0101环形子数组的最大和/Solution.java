// 给定一个由整数数组 A 表示的环形数组 C，求 C 的非空子数组的最大可能和。
// 在此处，环形数组意味着数组的末端将会与开头相连呈环状。（形式上，当0 <= i < A.length 时 C[i] = A[i]，且当 i >= 0 时 C[i+A.length] = C[i]）
// 此外，子数组最多只能包含固定缓冲区 A 中的每个元素一次。（形式上，对于子数组 C[i], C[i+1], ..., C[j]，不存在 i <= k1, k2 <= j 其中 k1 % A.length = k2 % A.length）

// 示例 1：
// 输入：[1,-2,3,-2]
// 输出：3
// 解释：从子数组 [3] 得到最大和 3

// 示例 2：
// 输入：[5,-3,5]
// 输出：10
// 解释：从子数组 [5,5] 得到最大和 5 + 5 = 10

// 示例 3：
// 输入：[3,-1,2,-1]
// 输出：4
// 解释：从子数组 [2,-1,3] 得到最大和 2 + (-1) + 3 = 4

// 示例 4：
// 输入：[3,-2,2,-3]
// 输出：3
// 解释：从子数组 [3] 和 [3,-2,2] 都可以得到最大和 3

// 示例 5：
// 输入：[-2,-3,-1]
// 输出：-1
// 解释：从子数组 [-1] 得到最大和 -1

// 提示：
// -30000 <= A[i] <= 30000
// 1 <= A.length <= 30000

class Solution {
  /**
   * 动态规划
   * 
   * 抽象为两种情况，最后比较出两种情况的最大值：
   * 
   * 1. 最大数组和在中间，一次遍历直接求出数组的最大和
   * 
   * 2. 最大数组和跨越了数组头尾，即在两端。数组中间的和比较小，只需找出中间的最小值，再用数组的整体和减去最小值，即为最大值
   * 
   * @param nums
   * @return
   */
  public int maxSubarraySumCircular(int[] nums) {
    int sum = nums[0];
    int dp = sum;
    int max = sum;
    int min = 0;
    // Kanade算法计算数组的最大和
    for (int i = 1; i < nums.length; i++) {
      sum += nums[i];
      dp = Math.max(dp + nums[i], nums[i]);
      max = Math.max(dp, max);
    }

    // Kanade算法计算数组中间的最小和
    dp = nums[0];
    // 遍历区间为 [1, n - 1)
    // 这样留下最后一个元素不判断，就不会导致 sum - min的值等于 0，无论它是否是最大的负数都会正确输出 max（因为 max存储了最大的负数）
    for (int i = 1; i < nums.length - 1; i++) {
      dp = Math.min(dp + nums[i], nums[i]);
      min = Math.min(dp, min);
    }

    return Math.max(max, sum - min);
  }
}
