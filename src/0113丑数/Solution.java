// 给你一个整数 n ，请你判断 n 是否为 丑数 。如果是，返回 true ；否则，返回 false 。
// 丑数 就是只包含质因数（质因子） 2、3、5 的正整数。
// 前20个丑数为：1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36

// 示例 1：
// 输入：n = 6
// 输出：true
// 解释：6 = 2 × 3

// 示例 2：
// 输入：n = 8
// 输出：true
// 解释：8 = 2 × 2 × 2

// 示例 3：
// 输入：n = 14
// 输出：false
// 解释：14 不是丑数，因为它包含了另外一个质因数 7 。

// 示例 4：
// 输入：n = 1
// 输出：true
// 解释：1 通常被视为丑数。

// 提示：
// -231 <= n <= 231 - 1

class Solution {
  public boolean isUgly(int n) {
    if (n <= 0) {
      return false;
    }

    // 定义质因子的数组
    int[] arr = { 2, 3, 5 };
    // 遍历数组，分别通过 2, 3, 5进行相除
    for (int num : arr) {
      // 如果这个数能被某个质因子除尽，一直相除
      while (n % num == 0) {
        n /= num;
      }
    }
    // 最终判断 n是否为 1
    return n == 1;
  }
}
